#####################################################################
#   Macros
#####################################################################

   
######################### PRINT START / END #########################

######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro TEMPADJUSTPA]
gcode:
    # ABS
    {% if printer.heater_bed.target >= 100 %}
         SET_PRESSURE_ADVANCE ADVANCE=0.02
    ## PETG
    #{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
    #   SET_PRESSURE_ADVANCE ADVANCE=
    # PLA
    {% elif printer.heater_bed.target <= 65 %}
         SET_PRESSURE_ADVANCE ADVANCE=0.035
    # Catch-all
    {% else %}
       SET_PRESSURE_ADVANCE ADVANCE=0.025
    {% endif %}

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:      
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}   
    
    #UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0                                                      ; cancel exhaust off timer (if there is one)
    #UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                                      ; cancel off timer (if there is one)
    RESETSPEEDS                                                                                         ; reset speed, accel etc to configured values                                                                                            ; reset LCD RGB
    STATUS_BUSY
     WLED_ON preset=2
    M104 S140                                                                                           ; set hotend to no-ooze temp
    M140 S{bed}                                                                                         ; set bed to target temp
    G28                                                                                                 ; home
    G90                                                                                                 ; absolute positioning
    {% if printer["temperature_sensor chamber"].temperature < chamber %}                                ; - if chamber is not at temp yet:
        HEATSOAK T={bed} MOVE=1                                                                         ;   heatsoak macro + park in center
        M190 S{bed}                                                                                     ;   wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}                          ;   wait for chamber final temp
    {% else %}                                                                                          ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < (bed-2) %}                                               ; -- but bed is not fully heated (within 2C):
            HEATSOAK T={bed} MOVE=1                                                                     ;       heatsoak and park
            M190 S{bed}                                                                                 ;       wait for bed final temp
        {% else %}                                                                                      ; -- and bed is already heated:
            HEATSOAK T={bed} MOVE=0                                                                     ;       "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %} 
    M106 S0                                                                                             ; turn off part cooling fan (from heatsoak)
    STATUS_LEVELING
    BED_MESH_CLEAR                                                                                      ; clear bed mesh
    ATTACH_PROBE_LOCK                                                                                   ; attach klicky + lock
    QUAD_GANTRY_LEVEL                                                                                   ; quad gantry level
    G28 Z                                                                                               ; home z
    G90                                                                                                 ; absolute positioning
    G0 Z20                                                                                              ; hop up to prevent knocking probe off after homing Z
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500                 ; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
    STATUS_MESHING
    BED_MESH_LOAD                                                                                  ; mesh
    G28 Z                                                                                               ; home z again
    G0 Z20                                                                                              ; hop up to prevent knocking probe off after homing Z
    DOCK_PROBE_UNLOCK                                                                                   ; stow probe, unlock
    G0 X100 Z10 Y{printer.toolhead.axis_maximum.y} F19500                                               ; move to right of nozzle brush
    M109 S{hotend}                                                                                      ; set & wait for hotend final temp
    CLEAN_NOZZLE                                                                                         ; clean nozzle while hot
    TEMPADJUSTPA                                                                                         ; change PA based on bed temp
    STATUS_CALIBRATING_Z
    CALIBRATE_Z                                                                                          ; calibrate z offset with hot nozzle
    SWIPENOZZLE                                                                                          ; swipe nozzle brush on way to print purge line
    SET_FAN_SPEED FAN=nevermore SPEED=0.5                                                                ; set chamber fan to 50%
    WLED_ON preset=2
    G90
    G92 E0                                                                                              ; reset Extruder
    # G1 E10 
    ADAPTIVE_PURGE                                                                                      ; Does a fancy purge
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                                  ; enable filament sensor
    #G0 X150 Y150 Z30 F3600                                                                               ;move to centre of bed
    STATUS_PRINTING                                                 

[gcode_macro PRINT_END]
gcode:                                                                                            ; revert LCD RGB
    WLED_ON preset=3
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                                 ; disable filament sensor
    CLEAR_PAUSE                                                                                         ; clear pause (from M191) if there is one
    {% if printer.heater_bed.temperature >= 100 %}                                              
        SET_FAN_SPEED FAN=nevermore SPEED=0.5                                                               ; crank exhaust fan to 100% to evacuate chamber
    {% endif %}                                                 
    M400                                                                                                ; wait for buffer to clear
    G92 E0                                                                                              ; zero the extruder
    G1 E-10.0 F3600                                                                                     ; retract 10mm
    M104 S0                                                                                             ; turn only the hotend off
    M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}                                              ; return the bed to temp, some slicers like to turn it off
    M107                                                                                                ; turn off part cooling fan
    G91                                                                                                 ; relative positioning
    G1 Z5 F3000                                                                                         ; move nozzle up 5mm
    G90                                                                                                 ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0                   ; park nozzle at rear
    BED_MESH_CLEAR                                                                                      ; clear bed mesh                                    
    #UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=120                                                    ; turn exhaust off in 2 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=900                                                   ; turn everything off in 30 min
    RESETSPEEDS
    STATUS_OFF                                                                                       ; reset speed, accel etc to configured max values
    #SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0                                                      ; disable XYE steppers (not z)
    #SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
      

[gcode_macro SWIPENOZZLE]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=SWIPENOZZLE
    G90                                                             ; absolute positioning
    G0 X100 Z10 Y{printer.toolhead.axis_maximum.y} F19500           ; move to right of nozzle brush
    G0 Z6   F19500                                                  ; lower
    G0 X50 F2400                                                    ; wipe back
    G0 Z10  F19500                                                  ; raise
    RESTORE_GCODE_STATE NAME=SWIPENOZZLE
  
######################## PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                                                  ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                                   ; set hotend temp variable for reference in resume macro
                                
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                                                 ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                                                         ; save current print position for resume                
        BASE_PAUSE                                                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                      ; check that zhop doesn't exceed z max
            G91                                                                                                             ; relative positioning
            G1 Z{z} F900                                                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                                                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500                                 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                                                      ; set timeout to 12 hours
    {% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                                                 ; enable filament sensor                                                                                                            ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                         ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                               ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                            ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                                 ; relative positioning
        M83                                                                                                                 ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                                                       ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                            ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                                ; restore position
        BASE_RESUME                                                                                                         ; resume print
    {% endif %}

# Filament runout / change alias    
[gcode_macro M600]
gcode:
    PAUSE
    
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END, and in PAUSE/RESUME)
#[delayed_gcode DISABLEFILAMENTSENSOR]   
#initial_duration: 1
#gcode:
#    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[delayed_gcode DELAYED_OFF]
gcode:
    OFF                                                             ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
    WLED_ON preset=1
    

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
    G28
    ATTACH_PROBE_LOCK
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    BED_MESH_LOAD
    G0 X150 Y150 Z30 F3600
    DOCK_PROBE_UNLOCK

[gcode_macro BED_MESH_LOAD]
description: Load an existing mesh or generate a new one
gcode:
  ##### get target get temperature #####
  {% set bed_temp = printer.heater_bed.target|int %}
  ##### join everything to a single mesh name #####
  {% set mesh_name = "Bed_Temp-" + bed_temp|string + "C" %}
  ##### end of definitions #####
  {% if printer.configfile.config["bed_mesh " + mesh_name] is defined %}
    M117 Loaded Old Mesh
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD={mesh_name}
  {% else %}
    M117 Creating New Mesh
    BED_MESH_CALIBRATE PROFILE={mesh_name}
    {action_respond_info("Run SAVE_CONFIG after the print to store the mesh")}
  {% endif %}

[gcode_macro NEW_MESH]
description: Create new bed mesh at current target bed temperature
gcode:
 ##### get target get temperature #####
  {% set bed_temp = printer.heater_bed.target|int %}
  {% set mesh_name = "Bed_Temp-" + bed_temp|string + "C" %}
  M117 Waiting Bed Temp
  M190 S{bed_temp}
  M117 Waiting 15 Mins
  G4 P900000
  M117 Home and Z Tilt
  G32
  M117 Creating New Mesh
  BED_MESH_CALIBRATE PROFILE={mesh_name}
  M117 Saving Bed Mesh {mesh_name}
  SAVE_CONFIG

[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set move = params.MOVE|default(1)|int %}

    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
    SET_FAN_SPEED FAN=nevermore SPEED=1               ; turn off exhaust fan
    STATUS_HEATING
    M140 S{t}                                       ; heat bed
    {% if t >= 100 %}
        M104 S180                                   ; set hotend to no-ooze temp
        M106 S205                                   ; turn on part fan (80%)
    {% else %}
        M106 S0                                     ; turn part fan off
    {% endif %}
    {% if move == 1 %}
        CG28                                        ; conditional home
        PARKCENTER                                  ; move to bed
    {% endif %}


######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                   ; set extruder to relative
    G1 E10 F600                           ; extrude a little to soften tip 
    G1 E-120 F1800                        ; retract filament completely
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83 ; set extruder to relative
    G1 E90 F600
    RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT

######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

[gcode_macro ZCG28]
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28 Z
    {% endif %}
    
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
    CG28                                                                                                                        ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                                                                                                                         ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500        
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
    CG28                                                                                                                        ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                                                                                                                         ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park top rear left
[gcode_macro PARKREAR]
gcode:
    CG28                                                                                                                        ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                                                                                                                         ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
    CG28                                                                                                                        ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                                                                                                                         ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500    
    RESTORE_GCODE_STATE NAME=PARKCENTER
    
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    CG28                                                                                                                        ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                                                                                                         ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKBED
    
######################### ALIASES/SHORTCUTS #########################

[gcode_macro QGL]
gcode:
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    
[gcode_macro BMC]
gcode:
    BED_MESH_CALIBRATE

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
    M84                                             ; turn steppers off
    TURN_OFF_HEATERS                                ; turn bed / hotend off
    M107                                            ; turn print cooling fan off
    SET_FAN_SPEED FAN=nevermore SPEED=0               ; turn exhaust fan off